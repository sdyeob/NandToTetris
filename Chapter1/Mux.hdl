// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/1/Mux.hdl
/** 
 * Multiplexor:
 * if (sel = 0) out = a, else out = b
 */
CHIP Mux {
    IN a, b, sel;
    OUT out;
    PARTS:
	Not(in=sel, out=nsel);
	And(a=a, b=nsel, out=out1);
	And(a=b, b=sel, out=out2);
	Or(a=out1, b=out2, out=out);
}

Mux를 위한 Boolean Operation은 다음과 같다.
Or(And(a, Not(sel)), And(b, sel))

위 연산을 HDL(Hardware Description Language)로 작성하면, 위와 같은 내용이 된다.

HDL에는 if문이 없기 때문에, 사실상 Mux가 if문 역할을 한다고 볼 수 있다.
헷갈렸던건, 결국 a, b의 데이터에 모두 접근하는데 출력값이 하나 나오는게 좀 헷갈렸다. 연산 결과는 납득이 되지만 이게 if문 역할을 하는게 신기하다.

Mux = Multiplexer(=Channel)의 약자로, '통로'와 같은 의미를 가진다. '통로'의 의미가 MUX에 어떻게 적용되는지 확인해보자.
보통 컴퓨터의 유의미한 하나의 동작은 한 주기(Cycle)안에 처리되어야 한다. 여기서 MUX의 유의미한 동작은 다음과 같다.
1. a, b, sel 입력을 받는다.
2. sel에 따라 a, b중 '하나'의 결과값을 선택한다.
	* 사실 내부 회로에 선택같은 행위는 없지만, 그냥 추상적으로 보면 그렇다는 것 이다. 
3. 선택된 값을 출력한다.
여기서 위 3개의 동작은 한 주기 안에 처리되어야 함으로, 선택된 입력은 out으로 선택되지 않은 입력은 버려진다고 볼 수 있다.
따라서, Mux에서 통로의 의미는 '선택된 하나의 값을 적절한 통로로 연결해주는 것'으로 이해할 수 있다.

