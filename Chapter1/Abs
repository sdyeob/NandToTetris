## What We Learn
H.W에서 사용하는 Chip은 Logical Gate(논리 게이트)로 구성된다. 여기서 논리 게이트란, Boolean function(And, Or, Xor, Not 등)을 H.W적으로 구현한 물리적인 장치를 의미한다.
	* 이 때, 논리게이트는  트랜지스터 혹은 저항등의 H.W 기술을 이용해 '구현'된 결과물이고, 우리는 이를 이용만 할 것 이기 때문에 Interface만 알면 된다.
이번 Chapter에서는 Boolean Algebra(불 대수)와 Boolean Function(불 함수)와 이러한 Boolean Function을 논리 게이트로 구성해본다.

## Goal
해당 Chapter에서 우리는 기초 논리 게이트인 Nand를 이용해서 Not, And, Or, Xor를 구성하고 더 나아가 Multiplexer, Demultiplexor Gate를 만드는게 목표다.

### Boolean Algebra(불 대수)
불 대수란, 1과 0을 다루며 이들을 다룰 때 변수를 이용해서 연산을 진행하는 수학을 의미한다. And, Or, Not, Nand, Nor, Xor등의 연산자를 가지고 연산을 수행한다.

### Boolean Function(불 함수)
불 함수란, Not, And, Or 등의 연산자들을 의미한다. 입출력으로 1/0을 이용하는 함수다. 이러한 불 함수들은 모두 논리 게이트로 구현할 수 있다.



불 대수에서 입출력에 대한 관계는 두가지로 표현이 가능하다.
1. 진리표
	* 사람이 읽기 쉽고, 각 변수들의 입력값과 출력값에 대한 관계가 명확하게 표현되어있는 표이다. 하지만, 진리표로 표현된 관계는 H.W적으로 구현하기 어렵다.
	진리표의 표현은 유일하며, 진리표 표현은 불 함수로 전환할 수 있다.

2. 불 함수 표현
	* 사람이 읽기 어렵지만, H.W적으로 구현하기 매우 수월하다. 표현할 수 있는 방식이 다양하며 결국 H.W최적화는 불 함수의 최적화에 좌우된다. 불 함수 또한 진리표로 전환할 수 있다.

Boolean Function을 물리적인 장치로 구현한 Gate는 입출력 형식이 동일하기 때문에, 여러개를 연결해서 복잡한 게이트를 구성할 수 있다.(Boolean Function이 여러개로 표현할 수 있는 것 처럼 복잡한 게이트(Composite Gate)또한 여러개로 표현할 수 있다.)

이러한 복잡한 게이트의 구현은 여러개일 수 있지만, Interface는 하나로 표현된다. 가령, 3-Way And의 경우 구현은 2개의 And로 될 수 있지만, Interface의 경우에는 하나의 형식으로 표현한다.

